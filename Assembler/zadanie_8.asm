	AD1	EQU	40H
	AD2	EQU	41H
	AD3	EQU	42H	

	TEKST1	EQU	4050H
	TEKST2	EQU	4100H

	LJMP	START
	ORG	100H
START:
	ACALL 	CLICK_4_SIGNS
	ACALL	SPACE
	ACALL	READ_HEX
	MOV	AD1, A
	LCALL	WRITE_HEX
	ACALL	WRITE_H
	ACALL	SPACE
	ACALL 	READ_HEX
	MOV	AD2, A
	LCALL	WRITE_HEX
	ACALL	WRITE_H
	ACALL	SPACE
	ACALL	CLICK
	LCALL	WAIT_KEY
	LCALL	LCD_CLR


;===============DODAWANIE===========
	ACALL	FIRST_VARIABLE
	MOV	A, #'+'
	LCALL	WRITE_DATA
	ACALL	SECOND_VARIABLE
	ACALL	EQUAL
	CLR	C		
	MOV	A, AD1
	ADD	A, AD2
	MOV	AD3, A		
	JNC	EE		
	MOV	A, #'1'
	LCALL	WRITE_DATA
	AJMP	EE1
EE:	ACALL	SPACE		
EE1:	MOV	A, AD3		
	LCALL	WRITE_HEX
	ACALL	WRITE_H
	ACALL	SPACE
	ACALL	SPACE
	ACALL	SPACE
	ACALL	SPACE
		
	
	

;ODEJMOWANIE

	ACALL 	FIRST_VARIABLE
	MOV	A, #'-'
	LCALL	WRITE_DATA
	ACALL	SECOND_VARIABLE
	ACALL	EQUAL
	MOV 	A, AD1
	CLR	C
	SUBB	A, AD2
	JNC	ODE
	CPL	A
	ADD	A, #01H
	MOV	R0, A
	MOV	A, #'-'
	LCALL	WRITE_DATA
	MOV	A, R0
	LCALL	WRITE_HEX
	ACALL	WRITE_H
	LCALL	WAIT_KEY
	ACALL	SPACE
	ACALL	SPACE
	ACALL	SPACE
	ACALL	SPACE
	LCALL	LCD_CLR
	LJMP 	START
ODE:
	LCALL	WRITE_HEX
	ACALL	WRITE_H
	LCALL	WAIT_KEY
	LCALL	LCD_CLR
	LJMP	START
	
	
	
EQUAL:
	MOV	A,#'='
	LCALL	WRITE_DATA
	RET

FIRST_VARIABLE:
	MOV	A, AD1
	LCALL	WRITE_HEX
	ACALL	WRITE_H
	RET
SECOND_VARIABLE:
	MOV	A, AD2
	LCALL	WRITE_HEX
	ACALL	WRITE_H
	RET

WRITE_H:
	MOV	A, #'h'
	LCALL	WRITE_DATA
	RET
CLICK:
	MOV	R2, #7
	MOV	DPTR, #TEKST1
	ACALL	TEXT_L
	RET
CLICK_4_SIGNS:
	MOV	R2,#15
	MOV	DPTR, #TEKST2
	ACALL	TEXT_L
	RET
	
	
SPACE:
	MOV	A, #32
	LCALL	WRITE_DATA
	RET

READ_HEX:
	LCALL	WAIT_KEY
	SWAP	A
	MOV	B, A
	LCALL	WAIT_KEY
	ORL	A, B
	RET
TEXT_L:
	MOVX	A,@DPTR
	INC	DPTR
	LCALL	WRITE_DATA
	DJNZ	R2,TEXT_L
	RET

	ORG	TEKST1
	DB	"kliknij"
	ORG	TEKST2
	DB	"kliknij 4 znaki"
END